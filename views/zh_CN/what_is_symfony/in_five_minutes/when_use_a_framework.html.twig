{% block title '我应在什么场合使用框架？' %}
{% block keywords '' %}
{% block description '' %}

{% block intro %}
    <p>
        嗯......每当你需要，当然不管是开发一个Web应用程序，还是一个网站，！
    </p>
    <p>
        如果你能找到一个完美符合您装潢，刚好现货供应的家居，为什么你还要自定义？这个同样适用于计算机应用：
        在您准备深入研究建立一个框架，一个小调查工作正在有序进行。
    </p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">一般需求 与 特定功能</h2>
    <p>
        除了一个框架，还有其他的解决方案，可用于开发web网站和Web应用程序：CMS（内容管理系统）和其补充模块，
        以及包装专业的解决方案（客户关系管理，电子商务解决方案等）。如果他们的原生功能完美地符合您的当前和未来的需求，
        没问题：用就是了！重新发明轮子没有意义。
    </p>
    <p>
        另一方面，当有特定需要，特定的业务规则，甚至在需要混合构建模块（内容和电子商务等），框架解决方案是必要的：
        它允许开发的应用程序，完美匹配您的当前的需求，同时仍然具有创新性。
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">正确的问题</h2>
    <p>
        为了确保您做出正确的选择，无论是短期以及中长远来看，有必要提出正确的问题：
    </p>
    <ol>
        <li>什么是我目前的需求呢？他们是否覆盖着打包的解决方案？</li>
        <li>如果我选择了一个框架，我需要什么样的技能？</li>
        <li>开发的解决方案是否可升级？</li>
    </ol>
    <p>
        最后，不要落入“明显的简单需求。”的陷阱。在许多情况下，它很快变得明显，无论是业务规则和功能实现都只是没有
        那么简单到位。
    </p>
    <p>
        顺便说一下，Symfony的也非常适合于“微型项目”。
    </p>
{% endblock %}

{% block summary %}
    <p>框架可以满足所有要求。</p>
    <p>...但是这并不总是必要的，尤其是当需求有一些更通用的特性。</p>
    <p>做出选择之前，规划出您当前和未来的需求的细节，然后比较市场上的各种解决方案。</p>
{% endblock %}
