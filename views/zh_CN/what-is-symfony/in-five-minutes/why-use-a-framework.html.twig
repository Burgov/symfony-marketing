{% block title '我为什么需要使用框架?' %}
{% block keywords '' %}
{% block description '我为什么需要使用框架？' %}

{% block intro %}
    <p>
        框架不是绝对必要的：它仅仅是可以帮助您更好更快地开发的工具之一！
        <br />
        更好，因为一个框架为您确保您正在开发一个应用程序是完全符合业务规则，即结构化，并可维护和可升级。
        <br />
        更快，因为它允许开发者为了重复使用通用模块，以节省时间专注于其他领域。然而，如果没有，曾经被被束缚于框架本身。
    </p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">投入到任务中，而不是在技术</h2>
    <p>
        这是一个框架的基本原则：不要重复造轮子。远离预感不好，低附加值的任务（例如，开发通用组件）以确保完全专注于业务规则。
    </p>
    <p>
        举个例子，一个框架让一个开发者避免花2～3天创建一个认证表单(这不是一个特别的任务）。这部分时间能够节省下来用于特定组件以及相应的单元测试;给你坚实的，可持续的和高质量的代码。
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">保证可升级性及可维护性</h2>
    <p>
        从长期来看，一个框架，要确保您的应用程序的寿命。如果一个开发团队按照他们喜欢的方式的工作，只有特定的团队能够维护和升级的应用程序。那是一个发行商支持的专有解决方案的方式。
    </p>
    <p>
        另一方面，一个框架提供应用程序的架构使得可以完全避免这个陷阱，这让任何开发人员- 他们是否参与了它的开发与否 - 当需要的时候能够方便地“认领”的应用程序，以保持它随着时间的推移和升级快速，整齐时。
    </p>
    <p>
        在这方面，一个框架不是黑匣子！Symfony它仍然是PHP...开发应用程序不限于Symfony，它们是
        <a href="{{ marketing_path('six-good-reasons') }}#interoperable">原生可操作</a>
        带有一些PHP库，如此而已。
    </p>
{% endblock %}

{% block summary %}
    <p>框架不是绝对必要的，但仍然是非常有用的。</p>
    <p>框架是质量的承诺，让应用有更低的成本的可升级性和可维护性。</p>
    <p>使用框架开发的应用程序有市场标准的可操作性。</p>
{% endblock %}
