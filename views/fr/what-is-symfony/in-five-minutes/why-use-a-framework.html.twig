{% block title 'Pourquoi utiliserais-je un framework ?' %}
{% block keywords '' %}
{% block description 'Pourquoi utiliserais-je un framework ?' %}

{% block intro %}
    <p>
        Un framework n'est absolument pas nécessaire : il s'agit "juste" d'un des outils
        disponibles pour vous aider à mieux développer et plus rapidement !
        <br />
        Mieux, car un framework vous fournit la certitude que vous développez une application
        qui est en accord avec les règles de gestion, qui est structuré et qui est également
        maintenable et évolutif.
        <br />
        Plus rapidement, parce qu'il permet au développeur de gagner du temps en réutilisant
        des modules génériques dans l'optique d'approfondir d'autres points. Toutefois,
        sans jamais être lié au framework lui-même.
    </p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">Investir dans la tâche, pas dans une technologie</h2>
    <p>
        Il s'agit d'un principe de base d'un framework : ne pas avoir à réinventer la roue.
        La suppression des tâches pressenties à faible valeur ajoutée (par exemple,
        le développement de composants génériques) dans le but de se concentrer
        exclusivement sur les règles de gestion.
    </p>
    <p>
        Par exemple, un framework évitera au développeur de passer 2 à 3 jours
        à créer un formulaire d'authentification (qui n'est pas une tâche spécifique).
        Le temps gagné peut être dédié à des composants plus spécifiques ou bien à leurs
        tests unitaires; vous offrant un code solide, durable et de bonne qualité.
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">Évolutivité et maintenance garantie</h2>
    <p>
        Sur le long terme, un framework assure la longévité de vos applications.
        Si une équipe de développement travaille comme elle le souhaite, seulement
        cette équipe sera capable de maintenir et mettre à niveau l'application
        facilement. À la manière d'un distributeur qui supporte une solution
        propriétaire.
    </p>
    <p>
        D'autre part, la structure qu'un framework offre pour l'application
        permet d'éviter de tomber dans ce piège et permet à tout développeur
        - qu'il ait participé au développement ou non - la capacité de facilement
        "adopter" une application, de la maintenir au cours du temps et de la
        mettre à niveau rapidement et proprement, dès que cela sera nécessaire.
    </p>
    <p>
        À cet égard, un framework n'est pas une boite noire ! Dans le cas de Symfony,
        il s'agit toujours de PHP… Les applications développées ne sont pas limitées
        à l'univers de Symfony, et elles sont
        <a href="{{ marketing_path('six-good-reasons') }}#interoperable">nativement interoperable</a>
        avec tout autre librairie PHP, par exemple.
    </p>
{% endblock %}

{% block summary %}
    <p>Un framework n'est pas une nécessité absolue, mais est néanmoins très utile.</p>
    <p>Un framework est un gage de qualité, d'évolutivité et de maintenabilité des applications à moindre coût.</p>
    <p>Les applications développées en utilisant un framework sont interopérables avec les standards du marché.</p>
{% endblock %}
