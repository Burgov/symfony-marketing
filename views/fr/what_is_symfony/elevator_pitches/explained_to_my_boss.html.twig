{% block title 'Symfony expliqué à mon Boss' %}
{% block keywords '' %}
{% block description '' %}

{% block intro %}
    <p>Symfony 2 est un framework PHP - un framework pour développer des sites web ou des applications écrites en PHP.</p>
{% endblock %}

{% block body1 %}
    <h2 class="title_09">Symfony vs. CMS et progiciels</h2>
    <p>
        Un framework, un CMS (Content Management System), et un progiciel
        ne répondent pas aux mêmes besoins et ne demandent pas le
        même investissement et/ou la même expertise.
    </p>
    <p>
        Avec un <strong>progiciel</strong>, cela est simple :
        à part changer quelques paramètres, les entreprises doivent
        se contenter des fonctionnalités disponibles, qui peuvent
        être plus limitées que le besoin initial; ou à l'opposé,
        bien trop complexes. Mis à part son intégration dans le
        système d'information actuel, opter pour un progiciel
        nécessite très peu d'expertise technique.
    </p>
    <p>
        Un <strong>CMS</strong> et ses modules complémentaires peuvent
        être utilisés pour créer des sites web et applications proches
        des besoins d'entreprise, tant que les modules requis sont
        disponibles et maintenus.
    </p>
    <p>
        Un <strong>framework</strong> offre toute la flexibilité
        d'un développement personnalisé et peut être utilisé pour
        bâtir une application qui répond parfaitement aux besoins
        exprimés. Cependant, cela demande du développement, une
        intégration et une maintenance avec une expertise technique.
    </p>
{% endblock %}

{% block body2 %}
    <h2 class="title_09">Symfony: Outils de développement</h2>
    <p>
        Que ce soit une application créée à la main ou développée
        utilisant un framework, une application PHP est une application
        PHP. Et dans les deux cas nécessite une expertise technique.
        Cependant, la présence d'un framework garanti qu'une application
        se conforme aux règles de l'industrie, elle est bien structurée,
        maintenable et évolutive. Cela permet également de faire gagner
        du temps aux développeurs, grâce à la réutilisation de modules
        génériques, ils peuvent se concentrer sur les fonctionnalités
        spécifiques de chaque entreprise.
    </p>
{% endblock %}
